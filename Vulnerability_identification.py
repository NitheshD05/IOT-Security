# Vulnerabilities mapping
vulnerabilities_map = {
    "MQTT": [
        "Weak or Default MQTT Broker Credentials",
        "Insecure Topic Permissions",
        "Lack of Encryption in MQTT Communication",
        "Inadequate Client Authentication",
        "MQTT Denial-of-Service (DoS) Attacks"
    ],
    "Zigbee": [
        "Zigbee Network Sniffing",
        "Zigbee Key Establishment Vulnerabilities",
        "Replay Attacks",
        "Unauthorized Device Pairing",
        "Zigbee Trust Center Compromise"
    ],
    "Z-Wave": [
        "Z-Wave Message Interception",
        "Z-Wave Security S2 Framework Bypass",
        "Z-Wave Replay Attacks",
        "Z-Wave Controller Vulnerabilities",
        "Z-Wave Device Firmware Vulnerabilities"
    ]
}

def choose_protocol():
    protocols = vulnerabilities_map.keys()
    print("Available protocols:")
    for idx, protocol in enumerate(protocols, 1):
        print(f"{idx}. {protocol}")
    choice = int(input("Enter the number corresponding to the protocol: ")) - 1
    if 0 <= choice < len(protocols):
        return list(protocols)[choice]
    else:
        print("Invalid choice!")
        return None

def choose_vulnerability(protocol):
    protocol_vulnerabilities = vulnerabilities_map.get(protocol, [])
    
    if not protocol_vulnerabilities:
        print(f"No vulnerabilities available for {protocol}.")
        return None

    print("\nChoose a vulnerability to exploit:")
    for idx, vuln in enumerate(protocol_vulnerabilities, 1):
        print(f"{idx}. {vuln}")
    
    choice = int(input("Enter the number corresponding to the vulnerability: ")) - 1

    if 0 <= choice < len(protocol_vulnerabilities):
        return protocol_vulnerabilities[choice]
    else:
        print("Invalid choice!")
        return None

def main():
    # Ask user for protocol
    chosen_protocol = choose_protocol()
    if not chosen_protocol:
        print("Exiting.")
        return

    chosen_vuln = choose_vulnerability(chosen_protocol)
    if chosen_vuln:
        print(f"\nYou have chosen to exploit: {chosen_vuln}")
    else:
        print("Exiting.")

if __name__ == "__main__":
    main()
